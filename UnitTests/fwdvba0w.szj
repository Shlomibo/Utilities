using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Utilities;
using System.Linq;
using System.Collections.Generic;

namespace UnitTests
{
	[TestClass]
	public class CLArgumentsTest
	{
		#region Consts

		private const string KEY = "-second key";
		private const string VALUE = "first value";
		private const string SEC_VALUE = "second value";
		private const string NOT_EXIST_KEY = "-no key";
		private const string NOT_EXIST_VALUE = "no value";
		private const string DUP_KEY = "-dup key";
		private const string SINGLE_VALUE_KEY = "-third key";
		#endregion

		#region Fields

		private static readonly string[] ARG_LIST = new string[]
			{
				"not", 
				"keyed", 
				"values",
				DUP_KEY,
				"first dup",
				"second dup",
				"-first key",
				KEY,
				VALUE, 
				SEC_VALUE,
				SINGLE_VALUE_KEY,
				"value",
				DUP_KEY,
				"third dup",
				"forth dup",
			};
		#endregion

		#region Properties

		public CLArguments Template { get; set; }
		#endregion

		[TestInitialize]
		public void InitTests()
		{
			this.Template = new CLArguments(ARG_LIST);
		}

		#region Add tests

		[TestMethod]
		public void AddTest()
		{
			const string TO_LAST_KEY = "value_to_the_last_key";
			const string ADDED_LONE_KEY = "-added_lone_key";
			const string ADDED_TO_EXISTING_VALUE = "added_to_existing_value";
			const string ADDED_WITH_VALUE_KEY = "-added_with_value_key";
			const string ADDED_TO_MISSING_KEY = "added_to_missing_key";

			CLArguments addList = this.Template.Clone();
			string lastKey = CLArguments.NO_KEY;

			for (int i = addList.Count - 1; i >= 0; i--)
			{
				if (addList.IsKey(addList[i]))
				{
					lastKey = addList[i];
					break;
				}
			}

			addList.Add(TO_LAST_KEY);

			Assert.AreEqual(TO_LAST_KEY, addList[addList.Count - 1],
				"Last item in list wasn't the added value");

			string[] lastValues = addList[lastKey];
			Assert.AreEqual(TO_LAST_KEY, lastValues[lastValues.Length - 1],
				"Last item in last key's values list wasn't teh added value");

			addList.Add(ADDED_LONE_KEY);
			Assert.AreEqual(ADDED_LONE_KEY, addList[addList.Count - 1],
				"Last item isn't the added key");
			Assert.IsTrue(addList.IsKey(addList[addList.Count - 1]),
				"Last key isn't considered as a key");

			addList.Add(ADDED_LONE_KEY, ADDED_TO_EXISTING_VALUE);
			Assert.IsTrue(addList[ADDED_LONE_KEY].Any(),
				"Existing key doesn't contain values");
			Assert.AreEqual(ADDED_TO_EXISTING_VALUE,
				addList[ADDED_LONE_KEY][addList[ADDED_LONE_KEY].Length - 1],
				"Last value of existing key is invalid");

			addList.Add(ADDED_WITH_VALUE_KEY, ADDED_TO_MISSING_KEY);
			Assert.IsTrue(addList.ContainsKey(ADDED_WITH_VALUE_KEY),
				"New key doesn't exist");
			Assert.IsTrue(addList[ADDED_WITH_VALUE_KEY].Length == 1,
				"New key have incorrent number of values");
			Assert.AreEqual(ADDED_TO_MISSING_KEY, addList[ADDED_WITH_VALUE_KEY][0],
				"New key doesn't contains the correct value");
		}

		[TestMethod]
		[ExpectedException(typeof(InvalidOperationException), "Failed to throw on invalid key")]
		public void AddValidateKey()
		{
			const string INVALID_KEY = "invalid_key";
			const string VALID_VALUE = "valid_value";

			CLArguments addList = this.Template.Clone();

			addList.Add(INVALID_KEY, VALID_VALUE);
		}

		[TestMethod]
		[ExpectedException(typeof(InvalidOperationException), "Failed to throw on invalid value")]
		public void AddValidateValue()
		{
			const string VALID_KEY = "-valid_key";
			const string INVALID_VALUE = "-invalud_value";

			CLArguments addList = this.Template.Clone();

			addList.Add(VALID_KEY, INVALID_VALUE);
		}

		[TestMethod]
		public void InsertTest()
		{
			CLArguments addList = this.Template.Clone();
			int keyIndex = addList.IndexOf(KEY);

			addList.Insert(keyIndex + 1, NOT_EXIST_VALUE);

			Assert.AreEqual(NOT_EXIST_VALUE, addList[keyIndex + 1],
				"Item in the index of list wasn't the added value");

			string[] lastValues = addList[KEY];
			Assert.IsTrue(addList[KEY].Contains(NOT_EXIST_VALUE),
				"Added item wasn't in key's values list");
		}

		[TestMethod]
		[ExpectedException(typeof(ArgumentOutOfRangeException), "Failed to throw on negative index")]
		public void InsertValidateNegative()
		{
			CLArguments addList = this.Template.Clone();
			addList.Insert(-1, "value");
		}

		[TestMethod]
		[ExpectedException(typeof(ArgumentOutOfRangeException), "Failed to throw on out of range index")]
		public void InsertValidateOutOfRage()
		{
			CLArguments addList = this.Template.Clone();
			addList.Insert(addList.Count + 1, "value");
		}
		#endregion

		#region Clear tests

		[TestMethod]
		public void ClearTest()
		{
			CLArguments clearList = this.Template.Clone();

			clearList.Clear();
			Assert.IsTrue(clearList.Count == 0,
				"Arg list contain items");
			Assert.IsTrue(clearList.Keys.Count == 0,
				"Arg list contain keys");
		}
		#endregion

		#region Clone tests

		[TestMethod]
		public void CloneTest()
		{
			CLArguments clone = this.Template.Clone();

			Assert.IsTrue((clone as IEnumerable<string>).SequenceEqual(this.Template),
				"Clone isn't equal to source");
			Assert.IsTrue(clone.Keys.SequenceEqual(this.Template.Keys),
				"Clones keys aren't equal to source");

			IEnumerable<bool> keyValues = from key in clone.Keys
										  select clone[key].SequenceEqual(this.Template[key]);
			Assert.IsTrue(keyValues.All(isEqual => isEqual),
				"Some keyed list are inequal");
		}
		#endregion

		#region Contains tests

		[TestMethod]
		public void ContainsTest()
		{
			CLArguments containsList = this.Template.Clone();

			Assert.IsTrue(containsList.Contains(KEY),
				"List does not contains existing key");
			Assert.IsTrue(containsList.Contains(VALUE),
				"List does not contains existing value");
			Assert.IsFalse(containsList.Contains(NOT_EXIST_KEY),
				"List contains non-existing key");
			Assert.IsFalse(containsList.Contains(NOT_EXIST_VALUE),
				"List contains non-existing value");
		}

		[TestMethod]
		public void ContainsKeyTest()
		{
			CLArguments containsList = this.Template.Clone();

			Assert.IsTrue(containsList.ContainsKey(KEY),
				"List does not contains existing key");
			Assert.IsFalse(containsList.ContainsKey(VALUE),
				"List contains existing value as key");
			Assert.IsFalse(containsList.ContainsKey(NOT_EXIST_KEY),
				"List contains non-existing key");
			Assert.IsFalse(containsList.ContainsKey(NOT_EXIST_VALUE),
				"List contains non-existing value as key");
		}
		#endregion

		#region CopyToTests

		[TestMethod]
		public void CopyToTests()
		{
			CLArguments copyToList = this.Template.Clone();
			string[] argsArray = new string[copyToList.Count];
			copyToList.CopyTo(argsArray, 0);

			Assert.IsTrue(copyToList.SequenceEqual(argsArray),
				"Copyed array is equal to args list");
		}
		#endregion

		#region IndexOf tests

		[TestMethod]
		public void IndexOfTest()
		{
			CLArguments indexOfList = this.Template.Clone();

			Assert.AreEqual(-1, indexOfList.IndexOf(NOT_EXIST_KEY),
				"Found index for non-existing key");
			Assert.AreEqual(3, indexOfList.IndexOf(DUP_KEY),
				"Invalid index of \"{0}\"" + DUP_KEY);
			Assert.AreEqual(12, indexOfList.IndexOf(DUP_KEY, 4),
				"False index for second same key in IndexOf_string_int");
			Assert.AreEqual(3, indexOfList.IndexOf(DUP_KEY, 1, 3),
				"False index for key in IndexOf_string_int_int");
			Assert.AreEqual(-1, indexOfList.IndexOf(DUP_KEY, 4, 5),
				"Found index for existing key, but out of rage");
		}

		[TestMethod]
		public void LastIndexOfTest()
		{
			CLArguments indexOfList = this.Template.Clone();

			Assert.AreEqual(-1, indexOfList.LastIndexOf(NOT_EXIST_KEY),
				"Found index for non-existing key");
			Assert.AreEqual(12, indexOfList.LastIndexOf(DUP_KEY),
				"Invalid index of \"{0}\"" + DUP_KEY);
			Assert.AreEqual(3, indexOfList.LastIndexOf(DUP_KEY, 4),
				"False index for second same key in IndexOf_string_int");
			Assert.AreEqual(12, indexOfList.LastIndexOf(DUP_KEY, 14, 3),
				"False index for key in IndexOf_string_int_int");
			Assert.AreEqual(-1, indexOfList.LastIndexOf(DUP_KEY, 11, 5),
				"Found index for existing key, but out of rage");
		}
		#endregion

		#region IsKey tests

		[TestMethod]
		public void IsKeyTest()
		{
			Assert.IsTrue(this.Template.IsKey(KEY),
				"Failed to identify existing key as key");
			Assert.IsTrue(this.Template.IsKey(NOT_EXIST_KEY),
				"Failed to identify non-existing key as key");
			Assert.IsFalse(this.Template.IsKey(VALUE),
				"Failed to identify existing value as value");
			Assert.IsFalse(this.Template.IsKey(NOT_EXIST_VALUE),
				"Failed to identify non-existing value as value");
		}
		#endregion

		#region Remove tests

		[TestMethod]
		public void RemoveTest()
		{
			CLArguments removeList = this.Template.Clone();

			Assert.IsFalse(removeList.Remove(NOT_EXIST_VALUE),
				"Non-existing item was \"removed\"");
			Assert.IsTrue(removeList.Remove(VALUE),
				"Exsting item wasn't removed");
			Assert.IsFalse(removeList.Contains(VALUE),
				"Existing item removed, but lasted in the list");
		}

		[TestMethod]
		public void RemoveAtTest()
		{
			CLArguments removeList = this.Template.Clone();

			removeList.RemoveAt(removeList.IndexOf(VALUE));
			Assert.IsFalse(removeList.Contains(VALUE),
				"Existing item removed, but lasted in the list");
		}

		[TestMethod]
		[ExpectedException(typeof(ArgumentOutOfRangeException), "RemoveAt didn't throw on negative index")]
		public void RemoveAtValidateNegative()
		{
			CLArguments removeList = this.Template.Clone();
			removeList.RemoveAt(-1);
		}

		[TestMethod]
		[ExpectedException(typeof(ArgumentOutOfRangeException), "RemoveAt didn't throw on out of range index")]
		public void RemoveAtValidateOutOfRage()
		{
			CLArguments removeList = this.Template.Clone();
			removeList.RemoveAt(removeList.Count);
		}

		[TestMethod]
		public void RemoveKeyTest()
		{
			CLArguments removeList = this.Template.Clone();
			Assert.IsFalse(removeList.RemoveKey(NOT_EXIST_KEY),
				"Did \"removed\" non-existant key");
			Assert.IsTrue(removeList.RemoveKey(KEY),
				"Didn't removed existant key");

			var keyAndValuesExistance = new bool[]
			{
				removeList.Contains(KEY),
				removeList.Contains(VALUE),
				removeList.Contains(SEC_VALUE),
			};

			Assert.IsTrue(keyAndValuesExistance.All(isContain => !isContain),
				"Key, or some of it's values still exists in list");
		}
		#endregion

		#region Indexer tests

		[TestMethod]
		public void IndexerGetTest()
		{
			CLArguments indexerList = this.Template.Clone();

			Assert.IsTrue(indexerList[KEY].Contains(VALUE),
				"Didn't got right values for key");
		}

		[TestMethod]
		[ExpectedException(typeof(KeyNotFoundException), "Didn't failed on non existing key")]
		public void IndexerGetValidateKey()
		{
			CLArguments indexerList = this.Template.Clone();
			string[] values = indexerList[NOT_EXIST_KEY];
		}

		[TestMethod]
		public void IndexerSetTest()
		{
			const string NEW_VALUE = "new_value";

			CLArguments indexerList = this.Template.Clone();
			var valuesArr = new string[] { NEW_VALUE };

			indexerList[KEY] = valuesArr;
			Assert.IsTrue(indexerList[KEY].SequenceEqual(valuesArr),
				"Failed to set existing key");

			var notExistValueArr = new string[] { NOT_EXIST_VALUE };
			indexerList[NOT_EXIST_KEY] = notExistValueArr;
			Assert.IsTrue(indexerList.ContainsKey(NOT_EXIST_KEY),
				"Failed to create new key in set");
			Assert.IsTrue(indexerList[NOT_EXIST_KEY].SequenceEqual(notExistValueArr),
				"Failed to create values for key");
		}

		[TestMethod]
		public void IndexerTryGetValuesTest()
		{
			CLArguments indexerList = this.Template.Clone();
			string[] values;

			Assert.IsFalse(indexerList.TryGetValue(NOT_EXIST_KEY, out values),
				"Got result for non-existing key");
			Assert.IsNull(values,
				"Values was returned for non-exsting key");
			Assert.IsTrue(indexerList.TryGetValue(KEY, out values),
				"Failed to get values for existing key");
			Assert.IsTrue(values.SequenceEqual(indexerList[KEY]),
				"Invalid values for existing key");
		}

		[TestMethod]
		public void IndexerTryGetValueTest()
		{
			CLArguments indexerList = this.Template.Clone();
			string value;

			Assert.IsFalse(indexerList.TryGetValue(NOT_EXIST_KEY, out value),
				"Got result for non-existing key");
			Assert.IsNull(value,
				"Value was returned for non-exsting key");
			Assert.IsFalse(indexerList.TryGetValue(KEY, out value),
				"Got result for existing key, with multi values");
			Assert.IsTrue(indexerList.TryGetValue(SINGLE_VALUE_KEY, out value),
				"Failed to get value for existing single value key");
			Assert.AreEqual(indexerList[SINGLE_VALUE_KEY][0], value,
				"Invalid values for existing key");
		}

		[TestMethod]
		[ExpectedException(typeof(ArgumentOutOfRangeException),
			"Didn't throw on negative index")]
		public void IndexerGetValidateNegative()
		{
			CLArguments indexerList = this.Template.Clone();
			string item = indexerList[-1];
		}

		[TestMethod]
		[ExpectedException(typeof(ArgumentOutOfRangeException),
			"Didn't throw on out of range index")]
		public void IndexerGetValidateOutOfRange()
		{
			CLArguments indexerList = this.Template.Clone();
			string item = indexerList[indexerList.Count];
		}

		[TestMethod]
		[ExpectedException(typeof(ArgumentOutOfRangeException),
			"Didn't throw on negative index")]
		public void IndexerSetValidateNegative()
		{
			CLArguments indexerList = this.Template.Clone();
			indexerList[-1] = NOT_EXIST_VALUE;
		}

		[TestMethod]
		[ExpectedException(typeof(ArgumentOutOfRangeException),
			"Didn't throw on out of range index")]
		public void IndexerSetValidateOutOfRange()
		{
			CLArguments indexerList = this.Template.Clone();
			indexerList[indexerList.Count] = NOT_EXIST_VALUE;
		}
		#endregion

		#region Properties tests

		[TestMethod]
		public void PropertiesTests()
		{
			CLArguments propList = this.Template.Clone();
			HashSet<string> keys = new HashSet<string>(from item in ARG_LIST
													   where propList.IsKey(item)
													   select item);
			HashSet<string> values = new HashSet<string>(from item in ARG_LIST
														 where !propList.IsKey(item)
														 select item);
			IEnumerable<string> listValues = propList.Values.SelectMany(item => item);

			keys.Add(CLArguments.NO_KEY);

			// Checking count
			Assert.AreEqual(ARG_LIST.Length, propList.Count,
				"Count mismatch");
			Assert.IsTrue((keys.Count == propList.Keys.Count) &&
				propList.Keys.All(key => keys.Contains(key)),
				"Keys property isn't match to keys");
			Assert.IsTrue(listValues.All(value => values.Contains(value)),
				"Values mismatch");
		}
		#endregion
	}
}
